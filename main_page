<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RTOS for Wearable Devices</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="toogle.css">
    <style>
        /* Fixed position for the time display */
        #timeDisplay {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 10px;
            border-radius: 5px;
            z-index: 1000; /* Ensure it stays on top */
        }
        /* Light mode styles */
        .light-mode {
            background-color: #f9fafb; /* Light gray background */
            color: #1f2937; /* Dark gray text */
        }
        .light-mode .bg-gray-800 {
            background-color: #e5e7eb; /* Light gray for cards */
        }
        .light-mode .bg-blue-500 {
            background-color: #3b82f6; /* Blue button */
        }
        .light-mode .bg-green-500 {
            background-color: #22c55e; /* Green button */
        }
        .light-mode .bg-yellow-500 {
            background-color: #facc15; /* Yellow button */
        }
        .light-mode .bg-red-500 {
            background-color: #ef4444; /* Red button */
        }
        .light-mode .bg-blue-400 {
            background-color: #60a5fa; /* Light blue text */
        }
        .light-mode .bg-red-300 {
            background-color: #fca5a1; /* Light red text */
        }
        .light-mode .bg-green-300 {
            background-color: #86efac; /* Light green text */
        }
        .light-mode .bg-yellow-300 {
            background-color: #fbbf24; /* Light yellow text */
        }
        /* Hover effect for charts */
        .chart-container {
            transition: transform 0.3s ease;
        }
        .chart-container:hover {
            transform: scale(1.05); /* Scale up the chart on hover */
        }
    </style>
</head>

<body class="bg-gray-900 text-white p-5" id="body">
    <div id="timeDisplay" class="text-lg font-bold">
        Time: --:--:-- <br>
        Date: --/--/----
    </div>

    <h1 class="text-5xl font-extrabold text-center mt-8 text-blue-400 drop-shadow-lg">RTOS Simulator for Wearables</h1>
    <br>
    <div class="container mx-auto">
        <!-- Dark/Light Mode Toggle -->
        <div class="flex justify-end mb-4">
            <label for="modeToggle" class="flex items-center cursor-pointer">
                <span id="modeEmoji" class="text-lg">üåô</span> <!-- Emoji span -->
                <input type="checkbox" id="modeToggle" class="hidden" onchange="toggleMode()">
                <div class="toggle-bg rounded-full shadow-inner bg-gray-400"></div>
                <div class="toggle-dot rounded-full bg-white shadow absolute transition-transform duration-300 transform" id="toggleDot"></div>
            </label>
        </div>

        <!-- Control Buttons -->
        <div class="flex justify-center gap-6 mt-6">
            <button onclick="startSimulation()" class="bg-green-500 hover:bg-green-600 transition-all duration-300 transform rounded-full px-6 py-3 text-lg font-semibold shadow-md hover:scale-110">Start</button>
            <button onclick="stopSimulation()" class="bg-yellow-500 hover:bg-yellow-600 transition-all duration-300 transform rounded-full px-6 py-3 text-lg font-semibold shadow-md hover:scale-110">Stop</button>
            <button onclick="resetSimulation()" class="bg-red-500 hover:bg-red-600 transition-all duration-300 transform rounded-full px-6 py-3 text-lg font-semibold shadow-md hover:scale-110">Reset</button>
        </div>
        <div class="text-center mt-4">
            <button id="syncWatchBtn" class="bg-blue-500 hover:bg-blue-600 px-6 py-2 rounded-lg shadow-md">
                üîÑ Sync Watch & Fetch Data
            </button>
        </div>

        <!-- Performance Charts -->
        <div class="mt-8 grid grid-cols-1 md:grid-cols-3 gap-6">
            <div class="chart-container bg-gray-800 p-6 rounded-lg shadow-lg mb-6">
                <h2 class="text-2xl font-semibold text-red-300">Heart Rate</h2>
                <canvas id="heartRateChart"></canvas>
            </div>
            <div class="chart-container bg-gray-800 p-6 rounded-lg shadow-lg mb-6">
                <h2 class="text-2xl font-semibold text-blue-300">Step Count</h2>
                <canvas id="stepCountChart"></canvas>
            </div>
            <div class="chart-container bg-gray-800 p-6 rounded-lg shadow-lg mb-6">
                <h2 class="text-2xl font-semibold text-green-300">Temperature</h2>
                <canvas id="temperatureChart"></canvas>
            </div>
        </div>

        <!-- Task Scheduler & Sensor Data -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
            <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
                <h2 class="text-2xl font-semibold text-yellow-300">Task Scheduler</h2>
                <ul id="taskList" class="mt-4 text-lg">
                    <li class="font-bold text-yellow-400">Heartbeat Sensor (Executes every 3s)</li>
                    <li class="font-bold text-yellow-400">Step Counter (Executes every 5s)</li>
                    <li class="font-bold text-yellow-400">Temperature Monitor (Executes every 7s)</li>
                </ul>
            </div>
            <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
                <h2 class="text-2xl font-semibold text-green-300">Live Sensor Data</h2>
                <p class="mt-2 font-bold text-green-400">‚ù§Ô∏è Heart Rate: <span id="heartRate" class="text-red-400">--</span> BPM</p>
                <p class="font-bold text-green-400">üèÉ Step Count: <span id="stepCount" class="text-blue-400">--</span></p>
                <p class="font-bold text-green-400">üèÉ Total Steps Today: - <span id="totalStepCount" class="text-blue-400">--</span></p>
                <p class="font-bold text-green-400">üå°Ô∏è Temperature: <span id="temperature" class="text-yellow-400">--</span> ¬∞C</p>
                <p class="font-bold text-green-400">üîã Battery Consumption: <span id="battery" class="text-green-400">100%</span></p>
            </div>
        </div>
    </div>

    <script>
        // Function to update the time and date
        function updateTime() {
            const now = new Date();
            const hours = String(now.getHours()).padStart(2, '0');
            const minutes = String(now.getMinutes()).padStart(2, '0');
            const seconds = String(now.getSeconds()).padStart(2, '0');
            const date = now.toLocaleDateString(); // Format date as MM/DD/YYYY

            document.getElementById("timeDisplay").innerText = `Time: ${hours}:${minutes}:${seconds} \nDate: ${date}`;
        }

        // Update time every second
        setInterval(updateTime, 1000);
        updateTime(); // Initial call to set the time immediately

        const taskList = document.getElementById('taskList');
        const tasks = [
            { name: 'Heartbeat Sensor', priority: 1, interval: 3000 },
            { name: 'Step Counter', priority: 2, interval: 5000 },
            { name: 'Temperature Monitor', priority: 3, interval: 7000 }
        ];

        function scheduleTasks() {
            taskList.innerHTML = '';
            tasks.sort((a, b) => a.priority - b.priority).forEach((task, index) => {
                const li = document.createElement('li');
                li.classList.add("flex", "justify-between", "items-center", "p-2");

                const taskText = document.createElement('span');
                taskText.innerText = `${task.name} (Executes every ${task.interval / 1000}s)`;

                // Toggle Switch Container
                const label = document.createElement('label');
                label.classList.add("switch");

                // Toggle Input
                const toggle = document.createElement('input');
                toggle.type = 'checkbox';
                toggle.checked = true; // Default to enabled
                toggle.id = `toggle-${index}`; // Unique ID for each toggle

                // Toggle Slider
                const slider = document.createElement('span');
                slider.classList.add("slider", "round");

                label.appendChild(toggle);
                label.appendChild(slider);

                li.appendChild(taskText);
                li.appendChild(label);
                taskList.appendChild(li);
            });
        }

        scheduleTasks();

        let batteryLevel = 100;
        function updateBattery() {
            if (batteryLevel > 0) batteryLevel -= 0.5;
            document.getElementById('battery').innerText = batteryLevel.toFixed(1) + '%';
        }
        setInterval(updateBattery, 5000);

        const heartRateCtx = document.getElementById('heartRateChart').getContext('2d');
        const stepCountCtx = document.getElementById('stepCountChart').getContext('2d');
        const temperatureCtx = document.getElementById('temperatureChart').getContext('2d');

        const heartRateChart = new Chart(heartRateCtx, {
            type: 'line',
            data: { labels: [], datasets: [{ label: 'Heart Rate', data: [], borderColor: 'red', fill: false }] },
            options: { responsive: true }
        });

        const stepCountChart = new Chart(stepCountCtx, {
            type: 'line',
            data: { labels: [], datasets: [{ label: 'Step Count', data: [], borderColor: 'blue', fill: false }] },
            options: { responsive: true }
        });

        const temperatureChart = new Chart(temperatureCtx, {
            type: 'line',
            data: { labels: [], datasets: [{ label: 'Temperature', data: [], borderColor: 'green', fill: false }] },
            options: { responsive: true }
        });

        function updateSensors() {
            // Get toggle elements
            const heartRateToggle = document.getElementById('toggle-0');
            const stepCountToggle = document.getElementById('toggle-1');
            const temperatureToggle = document.getElementById('toggle-2');

            if (heartRateToggle && heartRateToggle.checked) {
                const heartRate = Math.floor(Math.random() * (100 - 60) + 60);
                document.getElementById('heartRate').innerText = heartRate;

                heartRateChart.data.labels.push(`${heartRateChart.data.labels.length * 2}s`);
                heartRateChart.data.datasets[0].data.push(heartRate);
                heartRateChart.update();
            }

            if (stepCountToggle && stepCountToggle.checked) {
                const stepCount = Math.floor(Math.random() * 5000 + 1000);
                document.getElementById('stepCount').innerText = stepCount;

                stepCountChart.data.labels.push(`${stepCountChart.data.labels.length * 2}s`);
                stepCountChart.data.datasets[0].data.push(stepCount);
                stepCountChart.update();
            }

            if (temperatureToggle && temperatureToggle.checked) {
                const temperature = (Math.random() * (38 - 35) + 35).toFixed(1);
                document.getElementById('temperature').innerText = temperature;

                temperatureChart.data.labels.push(`${temperatureChart.data.labels.length * 2}s`);
                temperatureChart.data.datasets[0].data.push(temperature);
                temperatureChart.update();
            }
        }

        let sensorInterval;
        function startSimulation() {
            if (!sensorInterval) {
                sensorInterval = setInterval(updateSensors, 3000);
            }
        }

        function stopSimulation() {
            clearInterval(sensorInterval);
            sensorInterval = null;
        }

        function resetSimulation() {
            stopSimulation();
            document.getElementById('heartRate').innerText = '--';
            document.getElementById('stepCount').innerText = '--';
            document.getElementById('temperature').innerText = '--';
            document.getElementById('battery').innerText = '100%';
            batteryLevel = 100;

            [heartRateChart, stepCountChart, temperatureChart].forEach(chart => {
                chart.data.labels = [];
                chart.data.datasets[0].data = [];
                chart.update();
            });
        }

        // Toggle between dark and light mode
        function toggleMode() {
            const body = document.getElementById('body');
            const toggleDot = document.getElementById('toggleDot');
            const modeToggle = document.getElementById('modeToggle');
            const modeEmoji = document.getElementById('modeEmoji');

            if (modeToggle.checked) {
                body.classList.remove('bg-gray-900', 'text-white');
                body.classList.add('light-mode');
                toggleDot.style.transform = 'translateX(100%)'; // Move the toggle dot
                modeEmoji.innerText = '‚òÄÔ∏è'; // Change emoji to sun
            } else {
                body.classList.add('bg-gray-900', 'text-white');
                body.classList.remove('light-mode');
                toggleDot.style.transform = 'translateX(0)'; // Move the toggle dot back
                modeEmoji.innerText = 'üåô'; // Change emoji to moon
            }
        }
    </script>
    <script defer src="google_fit.js"></script>    
</body>
</html>
